<?xml version="1.0" encoding="UTF-8"?>
<seatml>
  <general name="MyServiceConsumer">
    <adaptor name="myservice0" type="consumer"
          interface="SimpleService::MyService|SimpleService.MyService" />
     <script>
      seat._async_echo = None
      seat._result = [None]
     </script>
     <script>
      class echo_functor:
        def __init__(self, msg, result):
          self._msg = msg
          self._result = result
          return

        def __call__(self, obj):
          try:
            if omniORB.CORBA.is_nil(obj):
              print( "No service connected." )
            else:
              self._result[0] = obj.echo(self._msg)
          except:
            pass

      class seq_print:
        def __init__(self):
          self._cnt = 0
          return

        def __call__(self, val):
          print( self._cnt, ": ", val )
          self._cnt += 1
          return
     </script>
  </general>

  <state name="main_mode">
   <onexec>
     <script>
    print( "\n" )
    print( "Command list: " )
    print( " echo [msg]       : echo message." )
    print( " set_value [value]: set value." )
    print( " get_value        : get current value." )
    print( " get_echo_history : get input messsage history." )
    print( " get_value_history: get input value history." )
    print( "> ", end="")

    args = str(sys.stdin.readline())
    argv = args.split()
    argv[-1] = argv[-1].rstrip("\n")

    if seat._async_echo and seat._async_echo.finished():
      print( "echo() finished: ", seat._result[0] )
      seat._async_echo = None

    if argv[0] == "echo" and len(argv) > 1:
      if not seat._async_echo:
        retmsg = ""
        func = echo_functor(argv[1], seat._result)
        seat._async_echo = seat.callServiceAsync('myservice0', func)
      else:
        print( "echo() still invoking" )

    elif argv[0] == "set_value" and len(argv) > 1:
      val = float(argv[1])
      seat.callService('myservice0','set_value', val)
      print( "Set remote value: ", val )

    elif argv[0] == "get_value":
      retval = seat.callService('myservice0', 'get_value')
      print( "Current remote value: ", retval )

    elif argv[0] == "get_echo_history":
      hist=seat.callService('myservice0', 'get_echo_history')
      OpenRTM_aist.CORBA_SeqUtil.for_each( hist, seq_print())

    elif argv[0] == "get_value_history":
      hist=seat.callService('myservice0', 'get_value_history')
      OpenRTM_aist.CORBA_SeqUtil.for_each(hist, seq_print())
     </script>
   </onexec>
  </state>
</seatml>
